{"componentChunkName":"component---src-templates-post-js","path":"/34226e4f-0a84-533b-b543-be011c238051","result":{"data":{"markdownRemark":{"id":"34226e4f-0a84-533b-b543-be011c238051","html":"<p>公式の図を見てもいまいち理解しづらいこれらのオペレーターを実際に動かしてみて理解したメモ</p>\n<h3>setup</h3>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo &quot;{}&quot; &gt; package.json\nnpm i -D rxjs</code></pre></div>\n<p>今回はよくあるユースケースとしてキーワード検索をイメージしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Subject <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> concatMap<span class=\"token punctuation\">,</span> mergeMap<span class=\"token punctuation\">,</span> switchMap <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rxjs/operators'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>keyword<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">response of keyword </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keyword<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\nsubject\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">concatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ここのoperatorを変更して動作確認する。</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>keyword<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> delay<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>keyword<span class=\"token operator\">:</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">,</span> delay<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>keyword<span class=\"token operator\">:</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> delay<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>これを実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">node index.js</code></pre></div>\n<p>時間軸を図に表すとこうなります。</p>\n<table>\n<thead>\n<tr>\n<th>時間</th>\n<th>親イベント</th>\n<th>非同期処理</th>\n<th>出力</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>a</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>200</td>\n<td>ab</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>300</td>\n<td></td>\n<td>abの検索が終了</td>\n<td></td>\n</tr>\n<tr>\n<td>400</td>\n<td></td>\n<td>aの検索が終了</td>\n<td></td>\n</tr>\n<tr>\n<td>500</td>\n<td>abc</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>600</td>\n<td></td>\n<td>abc の検索が終了</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>キーワードaでの検索の結果よりabの検索のほうが早くかえってきてしまったようです。</p>\n<h3>mergeMap</h3>\n<p>非同期処理が終了した順番に流れる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">response of keyword ab\nresponse of keyword a\nresponse of keyword abc</code></pre></div>\n<h3>switchMap</h3>\n<p>最新のイベントがながれる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">response of keyword ab\nresponse of keyword abc</code></pre></div>\n<p>キーワードaの検索結果が返ってきたときの最新のイベントはキーワードabであるので流れない。\nキーワード(ab|abc)の検索結果が返ってきたときの最新のイベントはキーワード(ab|abc)であるので流れる。</p>\n<h3>concatMap</h3>\n<p>親のイベントが流れた順番にながれる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">response of keyword a\nresponse of keyword ab\nresponse of keyword abc</code></pre></div>\n<p>時間いじって試してみると理解できると思います。</p>","frontmatter":{"title":"RxJSのswitchMap mergeMap concatMap","tags":["JavaScript","RxJS","Rx"],"date":"2020年04月12日"}}},"pageContext":{"id":"34226e4f-0a84-533b-b543-be011c238051"}}}