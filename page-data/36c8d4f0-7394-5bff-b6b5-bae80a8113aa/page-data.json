{"componentChunkName":"component---src-templates-post-js","path":"/36c8d4f0-7394-5bff-b6b5-bae80a8113aa","result":{"data":{"markdownRemark":{"id":"36c8d4f0-7394-5bff-b6b5-bae80a8113aa","html":"<h3>デモ</h3>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class ViewController: UIViewController {\n    override func loadView() {\n        view = UILabel().apply { $0\n            .text(&quot;Apply Swift&quot;)\n            .textAlignment(.center)\n            .textColor(.white)\n            .font(.boldSystemFont(ofSize: 24))\n            .backgroundColor(.black)\n        }\n    }\n}</code></pre></div>\n<img width=\"375\" alt=\"Simulator Screen Shot - iPhone 8 - 2019-10-10 at 22.43.54.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/31904bd4-9ad3-746f-ddb2-e3839afc82fa.png\">\n<hr>\n<p>私以外にもKotolinのapplyをSwiftでもやりたいと思ったことのある人はいるでしょう。\n例えば以下のようにUILabelを定義する場面を考えます。</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">let label: UILabel = {\n   let it = UILabel()\n   it.text = &quot;label..&quot; \n   return it\n}()</code></pre></div>\n<p>以前までは、以下のようなプロトコルを定義することで</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">protocol Applicatable {}\n\nextension Applicatable {\n  func apply(_ closure: ((Self) -&gt; ())) -&gt; Self {\n        closure(self)\n        return self\n    }\n}\n\nextension NSObject: Applicatable {}</code></pre></div>\n<p>それっぽく実装することができました。</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">let label = UILabel().apply { it in\n   it.text = &quot;label..&quot;\n}</code></pre></div>\n<p>しかし言語の進化により、もっとKotolinのapplyに近づけることができるようになりました。\nつい先日<a href=\"https://github.com/marty-suzuki/DuctTape\">DuctTape</a>というライブラリが公開されたのをきっかけにそれが可能になってたことを知りました。（Swiftのキャッチアップに遅れぎみです）</p>\n<h3>dynamicMemberLookup</h3>\n<p>Swift４.2で追加された機能ですが</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">@dynamicMemberLookup\nstruct StringMaker {\n    subscript(dynamicMember value: String) -&gt; String {\n        return value\n    }\n}\n\nlet maker = StringMaker()\ndebugPrint(maker.id) // String: id\ndebugPrint(maker.name) // String: name</code></pre></div>\n<p>Swift5.1からKeyPathを使えるようになったみたいです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@dynamicMemberLookup attribute requires ‘xxx’ to have a ‘subscript(dynamicMember:)’ method that accepts either ‘ExpressibleByStringLiteral’ or a keypath</code></pre></div>\n<p>これを使って参考ライブラリをパクりつつインターフェースの変更を40行程度実装すると</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">      let label = UILabel().apply { $0\n            .text(&quot;Apply Swift&quot;)\n            .textAlignment(.center)\n            .textColor(.white)\n            .backgroundColor(.black)\n        }\n\ndebugPrint(label.text) // Optional(Apply Swift)</code></pre></div>\n<p>上記のような実装をすることができました。\n一応ソースはGistに公開しておきます。</p>\n<p><a href=\"https://gist.github.com/churabou/7243d4ac9121a56513bb16023e3698f7\">https://gist.github.com/churabou/7243d4ac9121a56513bb16023e3698f7</a></p>","frontmatter":{"title":"Swift5.1 dynamicMemberLookup^KeyPathを使ってSwiftにKotolinのapplyを実装する","tags":["Xcode","iOS","Kotlin","Swift"],"date":"2019年10月04日"}}},"pageContext":{"id":"36c8d4f0-7394-5bff-b6b5-bae80a8113aa"}}}