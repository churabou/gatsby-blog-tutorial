{"componentChunkName":"component---src-templates-post-js","path":"/9dddcf53-9179-5f44-a114-dbb75552a817","result":{"data":{"markdownRemark":{"id":"9dddcf53-9179-5f44-a114-dbb75552a817","html":"<p>今更カレンダーなんて作りたくなかったけど、ライブラリ使いたくないし意外とコードが落ちてなくて\n<a href=\"https://qiita.com/sakuran/items/3c2c9f22cbcbf4aff731\">こちら</a>の記事を参考にしたが結構めちゃくちゃだったので。\n自分のように最小限コピペで動かせるものが欲しい人もいると思うので共有します。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/436be5eb-90a3-e5f1-ee0a-ffc2269555d9.gif\" alt=\"file.gif\"></p>\n<p><a href=\"https://github.com/churabou/SwiftCalendar\">https://github.com/churabou/SwiftCalendar</a></p>\n<h3>Extension</h3>\n<p>日付と色のextensionです。</p>\n<div class=\"gatsby-highlight\" data-language=\"ex.swift\"><pre class=\"language-ex.swift\"><code class=\"language-ex.swift\">extension UIColor {\n    class var lightBlue: UIColor {\n        return UIColor(red: 92.0 / 255, green: 192.0 / 255, blue: 210.0 / 255, alpha: 1.0)\n    }\n    \n    class var lightRed: UIColor {\n        return UIColor(red: 195.0 / 255, green: 123.0 / 255, blue: 175.0 / 255, alpha: 1.0)\n    }\n}\n\n\nextension Date {\n    func string(format: String) -&gt; String {\n        let formatter = DateFormatter()\n        formatter.dateFormat = format\n        return formatter.string(from: self)\n    }\n}</code></pre></div>\n<h3>MonthDateManager</h3>\n<div class=\"gatsby-highlight\" data-language=\"monthdatemanager.swift\"><pre class=\"language-monthdatemanager.swift\"><code class=\"language-monthdatemanager.swift\">import Foundation\n\nfinal class MonthDateManager {\n    \n    private let calendar = Calendar.current\n    private (set) var days: [Date] = []\n    private var firstDate: Date! {\n        didSet {\n           days = createDaysForMonth()\n        }\n    }\n    \n    var monthString: String {\n        return firstDate.string(format: &quot;YYYY/MM&quot;)\n    }\n    \n    init() {\n        var component = calendar.dateComponents([.year, .month], from: Date())\n        component.day = 1\n        firstDate = calendar.date(from: component)\n        days = createDaysForMonth()\n    }\n    \n    func createDaysForMonth() -&gt; [Date] {\n        // 月の初日の曜日\n        let dayOfTheWeek = calendar.component(.weekday, from: firstDate) - 1\n        // 月の日数\n        let numberOfWeeks = calendar.range(of: .weekOfMonth, in: .month, for: firstDate)!.count\n        // その月に表示する日数\n        let numberOfItems = numberOfWeeks * 7 \n\n        return (0..&lt;numberOfItems).map { i in\n            var dateComponents = DateComponents()\n            dateComponents.day = i - dayOfTheWeek\n            return calendar.date(byAdding: dateComponents, to: firstDate)!\n        }\n    }\n    \n    func nextMonth() {\n        firstDate = calendar.date(byAdding: .month, value: 1, to: firstDate)\n    }\n    \n    func prevMonth() {\n        firstDate = calendar.date(byAdding: .month, value: -1, to: firstDate)\n    }\n}</code></pre></div>\n<h3>CalendarCell</h3>\n<p>セルはラベルだけです。\n土曜日は青くするといった要件はモデルの初期化に打ち込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"calendercell.swift\"><pre class=\"language-calendercell.swift\"><code class=\"language-calendercell.swift\">import UIKit\n\nfinal class CalendarCell: UICollectionViewCell {\n    \n    private var label: UILabel = {\n        let it = UILabel()\n        it.textAlignment = .center\n        it.translatesAutoresizingMaskIntoConstraints = false\n        return it\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: contentView.topAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            label.leftAnchor.constraint(equalTo: contentView.leftAnchor),\n            label.rightAnchor.constraint(equalTo: contentView.rightAnchor),\n            ])\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(&quot;init(coder:) has not been implemented&quot;)\n    }\n    \n    func configure(model: Model) {\n         label.text = model.text\n         label.textColor = model.textColor\n    }\n}\n\n\nextension CalendarCell {\n\n    struct Model {\n        var text: String = &quot;&quot;\n        var textColor: UIColor = .black\n    }\n}\n\nextension CalendarCell.Model {\n    \n    init(date: Date) {\n        let weekday = Calendar.current.component(.weekday, from: date)\n        if weekday == 1 {\n            textColor = .lightRed\n        } else if weekday == 7 {\n            textColor = .lightBlue\n        } else {\n            textColor = .gray\n        }\n        text = date.string(format: &quot;d&quot;)\n    }\n}</code></pre></div>\n<h3>ViewController</h3>\n<div class=\"gatsby-highlight\" data-language=\"viewcontroller.swift\"><pre class=\"language-viewcontroller.swift\"><code class=\"language-viewcontroller.swift\">final class ViewController: UIViewController {\n    \n    private let dateManager = MonthDateManager()\n    private let weeks = [&quot;日&quot;,&quot;月&quot;, &quot;火&quot;, &quot;水&quot;, &quot;木&quot;, &quot;金&quot;, &quot;土&quot;]\n    private let itemSize: CGFloat = (UIScreen.main.bounds.width - 60) / 7\n    \n    private lazy var calenderCollectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        layout.itemSize = CGSize(width: itemSize, height: 50)\n        let collectionView = UICollectionView(frame: self.view.frame, collectionViewLayout: layout)\n        collectionView.backgroundColor = .white\n        collectionView.register(CalendarCell.self, forCellWithReuseIdentifier: &quot;cell&quot;)\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        return collectionView\n    }()\n    \n    private func setUpNavigationBar() {\n        navigationController?.navigationBar.barTintColor = UIColor(red: 255/255, green: 132/255, blue: 214/255, alpha: 1)\n        navigationController?.navigationBar.tintColor = .white\n        navigationController?.navigationBar.titleTextAttributes = [.foregroundColor : UIColor.white]\n        \n        navigationItem.rightBarButtonItem = UIBarButtonItem(\n            title: &quot;next&quot;,\n            style: .plain,\n            target: self,\n            action: #selector(actionNext)\n        )\n        \n        navigationItem.leftBarButtonItem = UIBarButtonItem(\n            title: &quot;back&quot;,\n            style: .plain,\n            target: self,\n            action: #selector(actionBack)\n        )\n        title = dateManager.monthString\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        calenderCollectionView.frame.size.width = view.bounds.width\n        calenderCollectionView.frame.size.height = 500\n        view.addSubview(calenderCollectionView)\n        setUpNavigationBar()\n    }\n    \n    @objc private func actionNext() {\n        dateManager.nextMonth()\n        calenderCollectionView.reloadData()\n        title = dateManager.monthString\n    }\n    \n    @objc private func actionBack() {\n        dateManager.prevMonth()\n        calenderCollectionView.reloadData()\n        title = dateManager.monthString\n    }\n}\n\nextension ViewController: UICollectionViewDataSource {\n    \n    func numberOfSections(in collectionView: UICollectionView) -&gt; Int {\n        return 2\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {\n        return section == 0 ? weeks.count : dateManager.days.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: &quot;cell&quot;, for: indexPath) as! CalendarCell\n        if indexPath.section == 0 {\n            let day = weeks[indexPath.row]\n            let model = CalendarCell.Model(text: day, textColor: .black)\n            cell.configure(model: model)\n        } else {\n            let date = dateManager.days[indexPath.row]\n            cell.configure(model: CalendarCell.Model(date: date))\n        }\n        return cell\n    }\n}\n\nextension ViewController: UICollectionViewDelegate {\n    \n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        if indexPath.section == 0 {\n            return\n        }\n        title = dateManager.days[indexPath.row].string(format: &quot;YYYY/MM/dd&quot;)\n    }\n}</code></pre></div>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/eda15263-65fe-8e7e-8869-cb714f5253ba.gif\" alt=\"file.gif\"></p>\n<p>今回は参考元の記事を尊重したコードを公開しましたが\n実際には前月の日付は表示したくない、スクロールしたいとかいった要望があると思います。</p>\n<p>にしても今更カレンダーなんて作りたくなかった。\n素直にライブラリ使えばよかった。</p>","frontmatter":{"title":"Swiftでカレンダーを作る","tags":["Xcode","iOS","Swift"],"date":"2019年04月28日"}}},"pageContext":{"id":"9dddcf53-9179-5f44-a114-dbb75552a817"}}}