{"componentChunkName":"component---src-templates-post-js","path":"/4ac87f61-abdb-5629-97f6-79d92e985fce","result":{"data":{"markdownRemark":{"id":"4ac87f61-abdb-5629-97f6-79d92e985fce","html":"<h3>本題</h3>\n<p>UIKitでGridレイアウトを実装しようとするとUICollectionViewクラスを利用するのが一般的だと思います。\nただご存知の通りUICollectionViewを使う場合、UICollectionViewLayout, UICollectionViewDelegate, UICollectionViewDataSource、などのUICollectionViewのメソッドをいちいち呼ばなきゃいけないので結構面倒くさいです。\n実際、昨年ぐらい（もっと前から？）宣言的に書くというのが、じわじわと広がってきて、今年になってSwiftUIもでてきてだいぶ宣言的にかけるようになりました。</p>\n<p>CollectionViewはセルを再利用してくれるので、たくさんのデータを表示する際には使うのですが、場合によってはセルを再利用しなくてもいい場合があります。</p>\n<p>そんなときにCollectionViewを使わずsubViewを並べてくれるレイアウトクラスをちょこっと作ってやるといいと思います。</p>\n<h3>再利用しないGridViewの例</h3>\n<p>たとえば、パスコードロックなどの数字入力画面、カレンダー、カラーパレットなどですね。</p>\n<p>使用例１</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">        gridView.backgroundColor = .white\n        gridView.insets = .zero\n        gridView.borderWidth = 5\n        gridView.gridSize = 4\n        \n        let size = gridView.gridSize * gridView.gridSize\n        let colors = (0..&lt;size).map { UIColor(hue: CGFloat($0) / CGFloat(size), saturation: 0.85, brightness: 0.9, alpha: 1) }\n        colors.forEach {\n            let view = UIView()\n            view.backgroundColor = $0\n            gridView.addSubview(view)\n        }\n        gridView.layout.center(0).size(300) // オートレイアウトのExtension</code></pre></div>\n<p>カラーパレットとか</p>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/7a88e60d-af13-2a21-b83c-f3d4171a8905.png\" width=217 height=448>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/dcff7cf2-80ec-34c7-8119-74491f255408.png\" width=217 height=448>\n<p>カレンダーとか</p>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/436be5eb-90a3-e5f1-ee0a-ffc2269555d9.gif\" width=217 height=448>\n<p>パスコードの数字入力画面とか</p>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/8fa64c7e-fdda-c4ca-d184-200ec535a1c5.png\" width=217 height=448>\n<h3>実装</h3>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class GridLayoutView: UIView {\n    var gridSize: Int = 4\n    var borderWidth: CGFloat = 5\n    var insets: UIEdgeInsets = .zero\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n\n        let margin = borderWidth\n\n        let width = (bounds.width - CGFloat(gridSize - 1) * margin - insets.left - insets.right) / CGFloat(gridSize)\n        let height = (bounds.height - CGFloat(gridSize - 1) * margin - insets.top - insets.bottom) / CGFloat(gridSize)\n        \n        let startX: CGFloat = insets.left\n        let startY: CGFloat = insets.top\n\n        var x = startX\n        var y = startY\n        \n        subviews.enumerated().forEach { index, view in\n            view.frame.origin = CGPoint(x: x, y: y)\n            view.frame.size = CGSize(width: width, height: height)\n            \n            x += width + margin\n            if index % gridSize == gridSize - 1 {\n                x = startX\n                y += height + margin\n            }\n        }\n    }\n}</code></pre></div>\n<h3>Tips</h3>\n<ul>\n<li>中央のマージンはborderWidthで指定します。</li>\n<li>外側のマージンはinsetsで指定します。</li>\n<li>ボーダーカラーはbackgroundColorを指定すればかわります。</li>\n<li>subViewを自動で並べてくれるのでaddSubviewするだけです。</li>\n</ul>\n<h3>補足</h3>\n<p>等間隔にViewを配置するにはUIStackViewをよく使いますが、今回は使っていません。\n内部でAutoLayoutを使用しているのと、純粋に座標計算したほうがコード量が少ないからです。</p>\n<p>Storyboard派の皆さんはUIStackViewを使えば簡単にできるじゃないかと思うかもしれませんが\n個人開発する上では圧倒的に時短かつ再利用可能です(コンポネントとして)</p>\n<h3>まとめ</h3>\n<p>ちょっとしたGridLayoutを実現するためのレイアウトクラスを作って使ってるよというはなし。\ninsert, delete, drag, reuseなどUICollectionViewのほうが優れている点が多い。</p>","frontmatter":{"title":"Swiftで簡単なGrid Layoutを実装するためのレイアウトクラス （UIKit）","tags":["iOS","Swift"],"date":"2019年07月06日"}}},"pageContext":{"id":"4ac87f61-abdb-5629-97f6-79d92e985fce"}}}