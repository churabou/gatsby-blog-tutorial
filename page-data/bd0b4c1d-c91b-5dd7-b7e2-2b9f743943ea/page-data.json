{"componentChunkName":"component---src-templates-post-js","path":"/bd0b4c1d-c91b-5dd7-b7e2-2b9f743943ea","result":{"data":{"markdownRemark":{"id":"bd0b4c1d-c91b-5dd7-b7e2-2b9f743943ea","html":"<p>Socket.ioのチュートリアルをやったのをまとめました。15分もあればsocket.ioを試すことができます。JavaScriptのコードは20行くらいです。</p>\n<p>今回は公式のチュートリアルに沿ってリアルタイムチャット機能の実装を試してみました。\nES6で追加されたアロー関数やconstを使ったりjQueryを使わないで実装をしました。</p>\n<p>完成図</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/166241/6ec2ef9f-df5b-3f55-e6d8-61a843f598ea.gif\" alt=\"qiita.gif\"></p>\n<h1>Socket.ioに Get Start</h1>\n<ul>\n<li><a href=\"https://socket.io/get-started/chat/\">https://socket.io/get-started/chat/</a></li>\n</ul>\n<p>公式をみてみると</p>\n<blockquote>\n<p>It requires almost no basic prior knowledge of Node.JS or Socket.IO, so it’s ideal for users of all knowledge levels</p>\n</blockquote>\n<p>このチュートリアルは事前知識が全然なくてもできると書いてある(多分)ので初心者でも安心できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir chat-example\ncd chat-example</code></pre></div>\n<p>以下のようにpackage.jsonを作成する。</p>\n<div class=\"gatsby-highlight\" data-language=\"chat-example/package.json\"><pre class=\"language-chat-example/package.json\"><code class=\"language-chat-example/package.json\"> { \n    &quot;name&quot;: &quot;socket-chat-example&quot;, \n    &quot;version&quot;: &quot;0.0.1&quot;,\n    &quot;description&quot;: &quot;my first socket.io app&quot;,\n    &quot;dependencies&quot;: {}\n}</code></pre></div>\n<h2>expressでwebサーバーをたてる</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save express@4.15.2</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"index.js\"><pre class=\"language-index.js\"><code class=\"language-index.js\">const app = require(&#39;express&#39;)();\nconst http = require(&#39;http&#39;).Server(app);\n\napp.get(&#39;/&#39;, function(req, res){\n  res.send(&#39;&lt;h1&gt;Hello world&lt;/h1&gt;&#39;);\n});\n\nhttp.listen(3000, function(){\n  console.log(&#39;listening on *:3000&#39;);\n});</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node index.js</code></pre></div>\n<p><a href=\"http://localhost:3000/\">http://localhost:3000/</a> にアクセスするとHelloWorldが表示される</p>\n<p><a href=\"https://socket.io/get-started/chat/#The-web-framework\">The-web-framework</a></p>\n<h2>チャットアプリの雛形を表示してみる</h2>\n<p>res.sendでHTMLの文字列を渡していたけど、<code class=\"language-text\">sendFile</code>メソッドを使うことでhtmlファイルを提供できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"index.js\"><pre class=\"language-index.js\"><code class=\"language-index.js\">const app = require(&#39;express&#39;)();\nconst http = require(&#39;http&#39;).Server(app);\n\napp.get(&#39;/&#39;, function(req, res){\n  res.sendFile(__dirname + &#39;/index.html&#39;); //　HTMLファイルを使う\n});\n\nhttp.listen(3000, function(){\n  console.log(&#39;listening on *:3000&#39;);\n});</code></pre></div>\n<p>今回のチャットアプリのためのHTMLファイル</p>\n<div class=\"gatsby-highlight\" data-language=\"index.html\"><pre class=\"language-index.html\"><code class=\"language-index.html\">&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Socket.IO chat&lt;/title&gt;\n    &lt;style&gt;\n     * { margin: 0; padding: 0; box-sizing: border-box; }\n     body { font: 13px Helvetica, Arial; }\n     form { background: #21bace; padding: 6px; position: fixed; bottom: 0; width: 100%; }\n     form input { border: 0; padding: 10px; width: 90%; margin-right: 1%; border-radius: 3px;}\n     form button { width: 9%; background: white; border: none; padding: 10px; border-radius: 3px; }\n     #messages { list-style-type: none; margin: 0; padding: 0; }\n     #messages li { font-size: 16px; padding: 10px 15px; }\n     #messages li:nth-child(odd) { background: #eee; }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;ul id=&quot;messages&quot;&gt;&lt;/ul&gt;\n    &lt;form id=&quot;form&quot;&gt;\n      &lt;input id=&quot;messageField&quot; autocomplete=&quot;off&quot; /&gt;&lt;button&gt;Send&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p><a href=\"http://localhost:3000/\">http://localhost:3000/</a> にアクセスするとhtmlファイルが表示されているのがわかる。</p>\n<h2>Socket.ioをインストールする</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save socket.io</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"index.js\"><pre class=\"language-index.js\"><code class=\"language-index.js\">const app = require(&#39;express&#39;)();\nconst http = require(&#39;http&#39;).Server(app);\nconst io = require(&#39;socket.io&#39;)(http);\n\napp.get(&#39;/&#39;, function(req, res){\n  res.sendFile(__dirname + &#39;/index.html&#39;);\n});\n\nio.on(&#39;connection&#39;, (socket) =&gt; {\n  console.log(&#39;a user connected&#39;);\n});\n\nhttp.listen(3000);</code></pre></div>\n<p>bodyタグの閉じタグの前に以下を追加する</p>\n<div class=\"gatsby-highlight\" data-language=\"index.html\"><pre class=\"language-index.html\"><code class=\"language-index.html\">&lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n &lt;script&gt;\n   const socket = io();\n&lt;/script&gt;</code></pre></div>\n<p><a href=\"http://localhost:3000/\">http://localhost:3000/</a> にアクセスするとコンソールに出力される\n別タブで開いても表示される。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[xxx:chat-example xxx$ node index.js\na user connected\na user connected\na user connected\na user connected</code></pre></div>\n<h2>イベントを送信してみる</h2>\n<p>emitメソッドを使ってプラウザ側からイベントを送る</p>\n<div class=\"gatsby-highlight\" data-language=\"index.html\"><pre class=\"language-index.html\"><code class=\"language-index.html\">&lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n &lt;script&gt;\n      document.getElementById(&#39;form&#39;).addEventListener(&#39;submit&#39;, (e) =&gt; {\n        e.preventDefault(); // prevents page reloading\n        const messageField = document.getElementById(&#39;messageField&#39;);\n        socket.emit(&#39;chat message&#39;, messageField.value);\n      });\n&lt;/script&gt;</code></pre></div>\n<p>サーバ側でイベントを受診する</p>\n<div class=\"gatsby-highlight\" data-language=\"index.js\"><pre class=\"language-index.js\"><code class=\"language-index.js\">io.on(&#39;connection&#39;, (socket) =&gt; {\n  socket.on(&#39;chat message&#39;, (msg) =&gt; {\n    console.log(msg);\n  });\n});</code></pre></div>\n<p>文字を入力して送信ボタンを押すと、コンソールに入力した文字が出力され、プラウザーサーバー間でのイベントの送受信が正常に行われていることが確認できる。</p>\n<p><a href=\"https://socket.io/get-started/chat/#Emitting-events\">Emitting-events</a></p>\n<h2>イベントを配信する</h2>\n<p>あるプラウザからイベントを受診した接続されている全てのプラウザ(ユーザー)に向けてイベントを送信します。</p>\n<div class=\"gatsby-highlight\" data-language=\"index.js\"><pre class=\"language-index.js\"><code class=\"language-index.js\">io.on(&#39;connection&#39;, (socket) =&gt; {\n  socket.on(&#39;chat message&#39;, (msg) =&gt; {\n    io.emit(&#39;chat message&#39;, msg);\n  });\n});</code></pre></div>\n<p>プラウザ側でイベントを購読する。</p>\n<div class=\"gatsby-highlight\" data-language=\"index.html\"><pre class=\"language-index.html\"><code class=\"language-index.html\">&lt;html&gt;\n &lt;body&gt;\n   &lt;h1&gt;serve HTML file&lt;/h1&gt;\n   &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n   &lt;script&gt;\n     const socket = io();\n\n     document.getElementById(&#39;form&#39;).addEventListener(&#39;submit&#39;, (e) =&gt; {\n       e.preventDefault(); // prevents page reloading\n       const messageField = document.getElementById(&#39;messageField&#39;);\n       socket.emit(&#39;chat message&#39;, messageField.value);\n       messageField.value = &#39;&#39;;\n     });\n\n     socket.on(&#39;chat message&#39;, function(msg){\n       const item = document.createElement(&#39;li&#39;)\n       item.innerText = msg;\n       document.getElementById(&#39;messages&#39;).appendChild(item);\n     });\n   &lt;/script&gt;\n &lt;body&gt;\n&lt;/html&gt;</code></pre></div>\n<p><a href=\"https://socket.io/get-started/chat/#Broadcasting\">Broadcasting</a></p>\n<h2>Socket.ioを使ったチャットアプリのソースコード</h2>\n<div class=\"gatsby-highlight\" data-language=\"index.js\"><pre class=\"language-index.js\"><code class=\"language-index.js\">const app = require(&#39;express&#39;)();\nconst http = require(&#39;http&#39;).Server(app);\nconst io = require(&#39;socket.io&#39;)(http);\n\napp.get(&#39;/&#39;, function(req, res){\n  res.sendFile(__dirname + &#39;/index.html&#39;);\n});\n\nio.on(&#39;connection&#39;, (socket) =&gt; {\n  socket.on(&#39;chat message&#39;, (msg) =&gt; {\n    io.emit(&#39;chat message&#39;, msg);\n  });\n});\n\nhttp.listen(3000);</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"index.html\"><pre class=\"language-index.html\"><code class=\"language-index.html\">&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Socket.IO chat&lt;/title&gt;\n    &lt;style&gt;\n     * { margin: 0; padding: 0; box-sizing: border-box; }\n     body { font: 13px Helvetica, Arial; }\n     form { background: #21bace; padding: 6px; position: fixed; bottom: 0; width: 100%; }\n     form input { border: 0; padding: 10px; width: 90%; margin-right: 1%; border-radius: 3px;}\n     form button { width: 9%; background: white; border: none; padding: 10px; border-radius: 3px; }\n     #messages { list-style-type: none; margin: 0; padding: 0; }\n     #messages li { font-size: 16px; padding: 10px 15px; }\n     #messages li:nth-child(odd) { background: #eee; }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;ul id=&quot;messages&quot;&gt;&lt;/ul&gt;\n    &lt;form id=&quot;form&quot;&gt;\n      &lt;input id=&quot;messageField&quot; autocomplete=&quot;off&quot; /&gt;&lt;button&gt;Send&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n      const socket = io();\n\n      document.getElementById(&#39;form&#39;).addEventListener(&#39;submit&#39;, (e) =&gt; {\n        e.preventDefault(); // prevents page reloading\n        const messageField = document.getElementById(&#39;messageField&#39;);\n        socket.emit(&#39;chat message&#39;, messageField.value);\n        messageField.value = &#39;&#39;;\n      });\n\n      socket.on(&#39;chat message&#39;, function(msg){\n        const item = document.createElement(&#39;li&#39;)\n        item.innerText = msg;\n        document.getElementById(&#39;messages&#39;).appendChild(item);\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<h1>Socketを使ってみた感想</h1>\n<p>この程度のリアルタイムチャット機能を実装するのにJavaScrpt20行程度で済むのは正直驚きました。</p>","frontmatter":{"title":"Socket.ioを使って15分でリアルタイムチャットを実装する","tags":["JavaScript","Socket.io","ECMAScript","websocket"],"date":"2019年04月08日"}}},"pageContext":{"id":"bd0b4c1d-c91b-5dd7-b7e2-2b9f743943ea"}}}