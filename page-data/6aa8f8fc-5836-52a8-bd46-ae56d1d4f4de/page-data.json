{"componentChunkName":"component---src-templates-post-js","path":"/6aa8f8fc-5836-52a8-bd46-ae56d1d4f4de","result":{"data":{"markdownRemark":{"id":"6aa8f8fc-5836-52a8-bd46-ae56d1d4f4de","html":"<p>UIViewに新着と書かれたツールチップを描画します。ライブラリなんか使わずに簡単に描画できます。</p>\n<img width=\"80\" alt=\"スクリーンショット 2019-08-30 22.21.19.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/df0c0118-7d4c-4f51-7167-97f0c784da9b.png\">\n<p>まずPaddingラベルです。UILabelでは残念ながらPaddingを指定できないのでサブクラスを作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class PaddingLabel: UILabel {\n    var padding: UIEdgeInsets = .zero\n    \n    override func drawText(in rect: CGRect) {\n        super.drawText(in: rect.inset(by: padding))\n    }\n\n    override var intrinsicContentSize: CGSize {\n        var size = super.intrinsicContentSize\n        size.width += padding.left + padding.right\n        size.height += padding.top + padding.bottom\n        return size\n    }\n}</code></pre></div>\n<p>ツールチップの形はUIViewのdraw(_ rect: CGRect)メソッドをOverrideしてコンテクスト描画します。\nといっても別に難しいことはなく、鉛筆でツールチップを描くようにPathで線を引くだけです。\nツールチップの大きさはUILabelのintrinsicContentSizeによって決められるのでtextを指定してあげればいい感じに表示されます。今回は矢印の位置を下に固定しています。</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class TooltipView: UIView {\n    private let arrowWidth: CGFloat = 7\n    private let arrowHeight: CGFloat = 4.5\n    private let radius: CGFloat = 4\n    private let fillColor: UIColor = .init(hex: &quot;01b7ff&quot;)\n    private let lineWidth: CGFloat = 2\n    private let strokeColor: UIColor = .white\n    private let titleLabel: PaddingLabel = {\n        let it = PaddingLabel()\n        it.textColor = .white\n        it.font = .systemFont(ofSize: 17)\n        it.text = &quot;新着&quot;\n        it.textAlignment = .center\n        it.padding = UIEdgeInsets(top: 2, left: 4, bottom: 2, right: 4)\n        return it\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        configure()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n    }\n\n    override func draw(_ rect: CGRect) {\n        let top: CGFloat = rect.minY + arrowHeight\n        let left: CGFloat = rect.minX + arrowWidth\n        let right: CGFloat = rect.maxX - arrowWidth\n        let bottom: CGFloat = rect.maxY - arrowHeight - lineWidth\n\n        let topLeft = CGPoint(x: left + radius, y: top + radius)\n        let topRight = CGPoint(x: right - radius, y: top + radius)\n        let bottomLeft = CGPoint(x: left + radius, y: bottom - radius)\n        let bottomRight = CGPoint(x: right - radius, y: bottom - radius)\n\n        let path = UIBezierPath()\n\n\n        //     _____________________\n        //   /\n        //  |\n        path.addArc(\n            withCenter: topLeft,\n            radius: radius,\n            startAngle: .pi,\n            endAngle: 3 * .pi / 2,\n            clockwise: true\n        )\n        path.addLine(to: CGPoint(x: topRight.x, y: top))\n\n        //                    __\n        //                       \\\n        //                        |\n        //                        |\n\n        path.addArc(\n            withCenter: topRight,\n            radius: radius,\n            startAngle: -.pi / 2,\n            endAngle: 0,\n            clockwise: true\n        )\n        path.addLine(to: CGPoint(x: right, y: bottomRight.y))\n\n        //                        |\n        //                        |\n        //                        /\n        //                     --\n\n        path.addArc(\n            withCenter: bottomRight,\n            radius: radius,\n            startAngle: 0,\n            endAngle: .pi / 2,\n            clockwise: true\n        )\n\n        //  ----------  ---------\n        //            \\/\n\n        let centerX = rect.midX\n        path.addLine(to: CGPoint(x: centerX + arrowWidth / 2, y: bottom))\n        path.addLine(to: CGPoint(x: centerX - arrowWidth / 2, y: rect.maxY))\n        path.addLine(to: CGPoint(x: centerX - arrowWidth / 2 + 0.2, y: bottom))\n        path.addLine(to: CGPoint(x: bottomLeft.x, y: bottom))\n\n\n        //  |\n        //  |\n        //  |\n        //   \\ _______\n\n        path.addArc(\n            withCenter: bottomLeft,\n            radius: radius,\n            startAngle: .pi / 2,\n            endAngle: .pi,\n            clockwise: true\n        )\n\n        path.addLine(to: CGPoint(x: left, y: topLeft.y))\n\n        fillColor.setFill()\n        strokeColor.setStroke()\n        path.lineWidth = lineWidth\n        path.fill()\n        path.stroke()\n    }\n}\n\nprivate extension TooltipView {\n    func configure() {\n        addSubview(titleLabel)\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            titleLabel.leftAnchor.constraint(equalTo: leftAnchor, constant: arrowWidth),\n            titleLabel.rightAnchor.constraint(equalTo: rightAnchor, constant: -arrowWidth),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: arrowHeight),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -arrowHeight - lineWidth),\n        ])\n    }\n}</code></pre></div>\n<p>多少のカスタマイズ性を持たせたをgistに公開しました。\n昔はこれどうやって実装するのかわからず悲しかったです。\n(追記) UIBezierPath(roundedRect: cornerRadius: )を使えば周りは1行でかけそう。</p>\n<p>若干カスタマイズできるようにしたやつのソースをGistに乗っけました。\n<a href=\"https://gist.github.com/churabou/8057aedcf91333bce49aa43a656244ce\">https://gist.github.com/churabou/8057aedcf91333bce49aa43a656244ce</a></p>\n<img width=\"141\" alt=\"スクリーンショット 2019-08-31 14.48.22.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/fc4717d7-de8c-4854-47c0-ec91eff98f23.png\">\n<img width=\"141\" alt=\"スクリーンショット 2019-08-31 14.49.12.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/29da3b6f-e779-b3d6-b905-f536ae1c32cc.png\">\n<img width=\"142\" alt=\"スクリーンショット 2019-08-31 14.50.13.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/fe18d05f-e076-833b-11c4-25b3766039b6.png\">\n<img width=\"141\" alt=\"スクリーンショット 2019-08-31 14.50.38.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/d2b768c0-7ee6-3b32-7aaf-249a4f36bf61.png\">","frontmatter":{"title":"SwiftでTooltipを描画する","tags":["iOS","UIKit","Swift"],"date":"2019年08月31日"}}},"pageContext":{"id":"6aa8f8fc-5836-52a8-bd46-ae56d1d4f4de"}}}