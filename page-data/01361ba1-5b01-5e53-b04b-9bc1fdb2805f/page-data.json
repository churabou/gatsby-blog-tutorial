{"componentChunkName":"component---src-templates-post-js","path":"/01361ba1-5b01-5e53-b04b-9bc1fdb2805f","result":{"data":{"markdownRemark":{"id":"01361ba1-5b01-5e53-b04b-9bc1fdb2805f","html":"<p>JavaScriptのthisを完全に理解したのでまとめます。</p>\n<h2>JavaScriptのthisは難しくない</h2>\n<p>最初はキモすぎて理解不能でしたが要するにこうゆうことだと思います。</p>\n<ul>\n<li>呼び出し元によってthisの値は変わる。</li>\n<li>thisの値は固定することができる。</li>\n</ul>\n<h2>突然undifinedになるthis</h2>\n<p>JavaScriptを少し触り始めるとthisが想像とは違う値になっている事に気づきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">私は </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> です。</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 私は Bob です</span>\n<span class=\"token keyword\">const</span> bark <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span>bark\n<span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span></code></pre></div>\n<p>これは他言語とは異なる動きだと思います。</p>\n<p>一例としてSwiftを挙げています。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"私は <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">)</span></span> です。\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> dog <span class=\"token operator\">=</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 私は Bob です</span>\n\n<span class=\"token keyword\">let</span> bark <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span>bark\n<span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 私は Bob です</span></code></pre></div>\n<p>Reactなどのフレームワークをを使っていても、突然thisがundifinedになってしまい最初は困惑していまします。</p>\n<h2>thisの呼び出しパターン</h2>\n<p>thisは呼び出しかたによって変わります。</p>\n<h3>関数呼び出し</h3>\n<p>通常の呼び出しではグローバルオブジェクトを指します。\nブラウザ上ではwindowオブジェクトでです。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Window {parent: Window,</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ただストリクトモードだとundifinedになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undifined</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>メソッド呼び出し</h3>\n<p>メソッドとして呼ばれるときは呼び出しもとがthisになります。\nつまりドットの前です。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'taro'</span><span class=\"token punctuation\">,</span>\n  hello\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'jiro'</span><span class=\"token punctuation\">,</span>\n  hello\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window.name (関数呼び出し)</span>\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// taro (thisはobj1)</span>\nobj2<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// jiro (thisはobj2)</span></code></pre></div>\n<p>クラスのメソッドもprototypeチェーンに追加されるためこれと同様である。</p>\n<h3>コンストラクタ呼び出し</h3>\n<p>new を演算子を使う場合はthisは生成されるオブジェクトを指します。</p>\n<p>以下のUser関数があるとして</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>普通に呼び出すとthisはグローバルオブジェクトを指します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'taro'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'taro'</span></code></pre></div>\n<p>new 演算子を使うと</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'taro'</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// taro</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/new\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/new</a></p>\n<h3>DOM イベントハンドラ</h3>\n<p>DOMのイベントハンドラに登録するとthisの値は対象のDOM要素を指します。\nブラウザによって多少の違いがあるようです。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>MDNを見る限りこんな感じです。DOMのパターンは知りませんでした。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#Function%20context\">this - JavaScript | MDN</a></p>\n<h2>thisを固定する方法</h2>\n<p>thisは呼び出しかたによって変わってしまいますが、thisを固定する方法はあります。</p>\n<h3>bind call apply</h3>\n<p>これらのメソッドを使うとthisを固定することができます。</p>\n<p>bindはthisを固定した関数を返しcall,applyは実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'taro'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> binded <span class=\"token operator\">=</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token function\">binded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// taro</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// taro</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// taro</span></code></pre></div>\n<h3>arrow function</h3>\n<p>Arrow関数もthisを束縛することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'taro'</span><span class=\"token punctuation\">,</span>\n  hello\n<span class=\"token punctuation\">}</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window.name</span></code></pre></div>\n<p>定義時にthisがグローバルオブジェクトに固定されたので、メソッドとして呼び出したのにthisはグローバルオブジェクトのままです。</p>\n<h2>補足</h2>\n<h3>thisの退避</h3>\n<p>数年前に作られたライブラリのソースを読んでいるとよく使われているが、\n<code class=\"language-text\">that</code>や<code class=\"language-text\">_this</code>といった変数にいれることで対処をしている。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>100ms後に挨拶をしようとするとsetTimeoutの引数のfunctionの呼び出し元は不明です。\nもし内部でuserを呼ぶことになっていればうまく動くのですがそうではないようです。\nなのでthisを一旦別の変数に対比しておくことでやりたいこと実現します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>arrow関数のトランスパイル後</h3>\n<p>今回は出力が短くなる理由でtscを使っています。内部でthisを退避していることがわかるかと思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo &quot;{}&quot; &gt; package.json\nnpm i -D typescript</code></pre></div>\n<p>普段このような書き方はしないと思いますが</p>\n<div class=\"gatsby-highlight\" data-language=\"hello.ts\"><pre class=\"language-hello.ts\"><code class=\"language-hello.ts\">class Hello {\n  functionWorld = function() {\n     console.log(this)\n  }\n\n  arrowFunctionWorld = () =&gt; {\n     console.log(this)\n  }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./node_modules/.bin/tsc hello.ts</code></pre></div>\n<p>出力されるファイルを見ると</p>\n<div class=\"gatsby-highlight\" data-language=\"hello.js\"><pre class=\"language-hello.js\"><code class=\"language-hello.js\">var Hello = /** @class */ (function () {\n    function Hello() {\n        var _this = this;\n        this.functionWorld = function () {\n            console.log(this);\n        };\n        this.arrowFunctionWorld = function () {\n            console.log(_this);\n        };\n    }\n    return Hello;\n}());</code></pre></div>\n<p>このようにthisを退避している。</p>\n<h2>まとめ</h2>\n<p>JavaScriptのthisは難しくはないが気持ち悪い。</p>","frontmatter":{"title":"JavaScriptのthisは難しくない","tags":["JavaScript","TypeScript","Vue.js","React"],"date":"2020年04月12日"}}},"pageContext":{"id":"01361ba1-5b01-5e53-b04b-9bc1fdb2805f"}}}