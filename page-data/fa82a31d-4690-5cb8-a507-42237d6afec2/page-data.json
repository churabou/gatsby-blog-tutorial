{"componentChunkName":"component---src-templates-post-js","path":"/fa82a31d-4690-5cb8-a507-42237d6afec2","result":{"data":{"markdownRemark":{"id":"fa82a31d-4690-5cb8-a507-42237d6afec2","html":"<p>電車内でiPhone5というかSEを使っている人を見ると「まだこつい５使ってんのかよ」と思ってしまいます。奴らは最近主流のiPhone8やiPhoneXなどの端末と比べると一回り小さいため、iPhoneSEで起動してみると実はレイアウトが崩れてたなんてことが頻繁に起こってしまいます。</p>\n<p>なにか解決策はないかと軽くググってみたら、下記の記事を見つけました。\n<a href=\"https://qiita.com/usagimaru/items/dbd9ed49b04e113eb6de\">https://qiita.com/usagimaru/items/dbd9ed49b04e113eb6de</a>\nこれを参考にすれば実機でお手軽にディバイス別のレイアウトを確認することができそうだと思いました。</p>\n<h4>デモ</h4>\n<p>作成したDebugWindowをAppDelegateで指定します。\nすると右上にDと書かれたボタンが表示されタップするとディバイス一覧が表示され、対象のディバイスを選択するとwindowのサイズが対象ディバイスのサイズに変更されます。</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        window = DebugWindow()\n        window?.rootViewController = ViewController()\n        window?.makeKeyAndVisible()\n        return true\n    }</code></pre></div>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166241/738d783e-ab79-4b49-34b6-52d0678f9d4b.gif\" alt=\"demo.gif\"></p>\n<h4>ソース</h4>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">enum Device: CaseIterable {\n    // iPhone SE\n    case inch4\n    // iPhone 6 iPhone 6s iPhone 7 iPhone 8\n    case inch4_7\n    // iPhone 6 Plus iPhone 6s Plus iPhone 7 Plus iPhone 8 Plus\n    case inch5_5\n    // iPhone X\n    case inch5_7\n    // iPhone XR\n    case inch6_1\n\n    var size: CGSize {\n        switch self {\n        case .inch4: return .init(width: 320, height: 568)\n        case .inch4_7: return .init(width: 375, height: 667)\n        case .inch5_5: return .init(width: 414, height: 736)\n        case .inch5_7: return .init(width: 375, height: 812)\n        case .inch6_1: return .init(width: 414, height: 896)\n        }\n    }\n\n    var label: String {\n        switch self {\n        case .inch4: return &quot;iPhone SE&quot;\n        case .inch4_7: return &quot;iPhone 6 iPhone 6s iPhone 7 iPhone 8&quot;\n        case .inch5_5: return &quot;iPhone 6 Plus iPhone 6s Plus iPhone 7 Plus iPhone 8 Plus&quot;\n        case .inch5_7: return &quot;iPhone X&quot;\n        case .inch6_1: return &quot;iPhone XR&quot;\n        }\n    }\n}\n\nfinal class DebugWindow: UIWindow {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        configure()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(&quot;init(coder:) has not been implemented&quot;)\n    }\n    \n    private lazy var menuButton: UIButton = {\n        let it = UIButton()\n        it.addTarget(self, action: #selector(actionTap), for: .touchUpInside)\n        it.backgroundColor = UIColor(red: 55 / 255, green: 132 / 255, blue: 233 / 255, alpha: 1)\n        it.setTitle(&quot;D&quot;, for: .normal)\n        it.setTitleColor(.white, for: .normal)\n        it.titleLabel?.font = .boldSystemFont(ofSize: 20)\n        it.layer.cornerRadius = 20\n        it.clipsToBounds = true\n        return it\n    }()\n    \n    override func didAddSubview(_ subview: UIView) {\n        super.didAddSubview(subview)\n        bringSubviewToFront(menuButton)\n    }\n}\n\nprivate extension DebugWindow {\n    func configure() {\n        addSubview(menuButton)\n        menuButton.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            menuButton.topAnchor.constraint(equalTo: topAnchor, constant: 40),\n            menuButton.rightAnchor.constraint(equalTo: rightAnchor, constant: -40),\n            menuButton.widthAnchor.constraint(equalToConstant: 40),\n            menuButton.heightAnchor.constraint(equalToConstant: 40)\n            ])\n    }\n    \n    @objc func actionTap() {\n        let sheet = UIAlertController(title: &quot;select device&quot;, message: nil, preferredStyle: .actionSheet)\n        Device.allCases.forEach { device in\n            sheet.addAction(UIAlertAction(title: device.label, style: .default) { _ in\n                self.adjustSize(device: device)\n            })\n        }\n        sheet.addAction(UIAlertAction(title: &quot;cancel&quot;, style: .cancel))\n        topViewController()?.present(sheet, animated: true)\n    }\n    \n    func adjustSize(device: Device) {\n        let bounds = UIScreen.main.bounds\n        \n        UIView.animate(withDuration: 0.25) {\n            self.frame = bounds.insetBy(dx: (bounds.width - device.size.width) / 2, dy: (bounds.height - device.size.height) / 2)\n        }\n        rootViewController = ViewController() // RootViewControllerもしくは検証したいViewControllerを指定\n        bringSubviewToFront(menuButton)\n    }\n    \n    func topViewController(controller: UIViewController? = UIApplication.shared.keyWindow?.rootViewController) -&gt; UIViewController? {\n        if let navigationController = controller as? UINavigationController {\n            return topViewController(controller: navigationController.visibleViewController)\n        }\n        if let tabController = controller as? UITabBarController {\n            if let selected = tabController.selectedViewController {\n                return topViewController(controller: selected)\n            }\n        }\n        if let presented = controller?.presentedViewController {\n            return topViewController(controller: presented)\n        }\n        return controller\n    }\n}</code></pre></div>\n<p><a href=\"https://qiita.com/tomohisaota/items/f8857d01f328e34fb551\">https://qiita.com/tomohisaota/items/f8857d01f328e34fb551</a></p>\n<h4>問題点⚠</h4>\n<ul>\n<li>ViewがAutoLayoutで組まれていることが前提です。</li>\n<li>UIScreen.main.boundsは変わらないので、これを条件にレイアウトを組んでいる場合は検証になりません</li>\n<li>SafeAreaがなくなるから、iPhoneX以上の検証が無意味になる。</li>\n<li>実はアラート表示時にWarningが出ているのは秘密👮</li>\n</ul>\n<h4>感想</h4>\n<ul>\n<li>いけると思ったけど全然ダメでした。</li>\n<li>使用箇所は限定的でしたが、さくっと試せて便利といえば便利でした。</li>\n<li>ぶっちゃけAutoLayoutうんぬんじゃなくてラベルの文字がよく崩れます。NSAttributedStringとUILabelのadjustsFontSizeToFitWidthが一緒に使えればいいのですが。</li>\n<li>どうでもいいですがiPhone8のサイズでデザインが上がってきて、それどおりにマージンなどを組むとSEでレイアウトが崩るのでview.bottom + 60 などデザイン上のマージンの値をそのまま使うのではなく、画面全体に対する比率でレイアウトを組むように心がけています。</li>\n</ul>","frontmatter":{"title":"実機１台で別端末のレイアウトを確認する方法","tags":["Xcode","iOS","Swift"],"date":"2019年08月15日"}}},"pageContext":{"id":"fa82a31d-4690-5cb8-a507-42237d6afec2"}}}