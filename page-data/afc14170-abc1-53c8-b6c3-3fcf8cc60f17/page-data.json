{"componentChunkName":"component---src-templates-post-js","path":"/afc14170-abc1-53c8-b6c3-3fcf8cc60f17","result":{"data":{"markdownRemark":{"id":"afc14170-abc1-53c8-b6c3-3fcf8cc60f17","html":"<p>vueとかanglureとか触ってるとSwiftでボタン定義するのすごくだるいなと思う。(mac book airなのでIBは触りたくない）</p>\n<div class=\"gatsby-highlight\" data-language=\".html\"><pre class=\"language-.html\"><code class=\"language-.html\">&lt;button ng-click=&quot;ctrl.onClick&quot;&gt;anglure&lt;/button&gt;\n&lt;button v-on:click=&quot;say(&#39;what&#39;)&quot;&gt; vue &lt;/button&gt; </code></pre></div>\n<p>だからButtonクラスを作ってちょっとだけ楽してみた。</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class ViewController: UIViewController {\n\n    private lazy var button = Button(\n        title: &quot;click&quot;,\n        backgroundColor: .blue,\n        parent: view,\n        onClick: onClickButton\n    )\n\n    private var onClickButton = {\n        print(&quot;tap&quot;)\n    }\n}</code></pre></div>\n<hr>\n<p>ちなみにself参照するときはweakつけないとなーくらいに思ってたんでずけど、</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">  private var onClickButton = { [weak self] in\n       self?.hogehoge()\n  }</code></pre></div>\n<p>関数を渡してあげると、buttonが解放されなかった。なんででしょうか・・</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class ViewController: UIViewController {\n\n    private lazy var button = Button(\n        title: &quot;click&quot;,\n        backgroundColor: .blue,\n        parent: view,\n        onClick: tapButton\n    )\n\n    private func tapButton() {\n        print(&quot;tap&quot;)\n    }\n}</code></pre></div>\n<details><summary>ソースはこれです</summary><div>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class Button: UIButton {\n  \n    convenience init(\n        title: String = &quot;&quot;,\n        color: UIColor = .darkGray,\n        backgroundColor: UIColor = .clear,\n        parent: UIView? = nil,\n        onClick: (() -&gt; Swift.Void)? = nil\n        ) {\n        self.init(frame: .zero)\n        \n        addTarget(self, action: #selector(actionClick), for: .touchUpInside)\n        setTitle(title, for: .normal)\n        setTitleColor(color, for: .normal)\n        self.backgroundColor = backgroundColor\n        clickHandler = onClick\n        parent?.addSubview(self)\n    }\n    \n    private var clickHandler: (() -&gt; Swift.Void)?\n    \n    @objc private func actionClick() {\n        clickHandler?()\n    }\n}</code></pre></div>\n</div></details>\n<p>Swiftでもこうやってかけるようにしてみようかな・・</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">    private lazy var label = Label(\n        textColor: .darkGray,\n        parent: view,\n        bind: store.state.text\n    )</code></pre></div>\n<h2>昔ちょこっと試してた初期化方法(おまけ)</h2>\n<h3>lazyで初期化</h3>\n<p>基本的にはこれで初期化している。Extensionを使ってないから普通にSnipetにしてどこでも使える。</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class ViewController: UIViewController {\n\n    private lazy var button: UIButton = {\n        let b = UIButton()\n        b.setTitle(&quot;button&quot;, for: .normal)\n        b.addTarget(self, action: #selector(actionTap), for: .touchUpInside)\n        ...\n        return b\n    }()\n    \n    @objc private func actionTap() {\n        print(&quot;button touch up inside&quot;)\n    }\n}</code></pre></div>\n<h3>メソッドチェーンで初期化</h3>\n<p>メソッドチェーンでかけるExtensionを作ってKotlinのスコープ関数のように初期化してみたり</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class ViewController: UIViewController {\n\n    private lazy var button = UIButton().apply { $0\n        .setTitle(&quot;button&quot;, for: .normal)\n        .addTarget(self, action: #selector(actionTap), for: .touchUpInside)\n        ...\n    }\n    \n    @objc private func actionTap() {\n        print(&quot;button touch up inside&quot;)\n    }\n}</code></pre></div>\n<h3>　AddTargetのみ省略</h3>\n<p>RxSwiftの<code class=\"language-text\">button.rx.tap</code>が便利だったので\nNotificationCenterやocjcの黒魔術を使ってaddTargetのみ省略したり</p>\n<div class=\"gatsby-highlight\" data-language=\".swift\"><pre class=\"language-.swift\"><code class=\"language-.swift\">final class ViewController: UIViewController {\n    \n    private var button = UIButton()\n    \n    private func setUpButton() {\n        button.setTitle(&quot;button&quot;, for: .normal)\n        button.onTap = {\n           print(&quot;button touch up inside&quot;)\n        }\n    }\n}</code></pre></div>","frontmatter":{"title":"UIButtonをdeclarativeに扱う","tags":["Objective-C","Xcode","iOS","Vue.js","Swift"],"date":"2019年03月31日"}}},"pageContext":{"id":"afc14170-abc1-53c8-b6c3-3fcf8cc60f17"}}}